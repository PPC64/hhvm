[(AnnotatedAST.Fun
    { AnnotatedAST.f_mode = <opaque>;
      f_ret = (Some (<p>, (Hprim Tvoid)));
      f_name = (<p>, "\\foo"); f_tparams = [];
      f_where_constraints = []; f_variadic = AnnotatedAST.FVnonVariadic;
      f_params =
      [{ AnnotatedAST.param_hint =
         (Some (<p>,
                (Hoption
                   (<p>,
                    (Happly ((<p>, "\\A"), []))))));
         param_is_reference = false; param_is_variadic = false;
         param_pos = <p>; param_name = "$x"; param_expr = None;
         param_callconv = None }
        ];
      f_body =
      (AnnotatedAST.NamedBody
         { AnnotatedAST.fnb_nast =
           [(AnnotatedAST.Expr
               ((Some void),
                (AnnotatedAST.Assert
                   (AnnotatedAST.AE_assert
                      ((Some bool),
                       (AnnotatedAST.InstanceOf (
                          ((Some ?\A),
                           (AnnotatedAST.Lvar (<p>, $x))),
                          (AnnotatedAST.CI ((<p>, "\\A"), []))
                          )))))))
             ];
           fnb_unsafe = false });
      f_fun_kind = FSync; f_user_attributes = []; f_ret_by_ref = false });
  (AnnotatedAST.Class
     { AnnotatedAST.c_mode = <opaque>; c_final = false; c_is_xhp = false;
       c_kind = Cnormal; c_name = (<p>, "\\A");
       c_tparams = <opaque>; c_extends = []; c_uses = [];
       c_xhp_attr_uses = []; c_xhp_category = []; c_req_extends = [];
       c_req_implements = []; c_implements = []; c_consts = [];
       c_typeconsts = []; c_static_vars = []; c_vars = [];
       c_constructor = None; c_static_methods = []; c_methods = [];
       c_user_attributes = []; c_enum = None })
  ]
